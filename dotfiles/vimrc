set encoding=utf-8
scriptencoding utf-8
" ↑1行目は読み込み時の文字コードの設定
" ↑2行目はVim Script内でマルチバイトを使う場合の設定
" Vim scritptにvimrcも含まれるので、日本語でコメントを書く場合は先頭にこの設定が必要になる

"----------------------------------------------------------
" NeoBundle
"----------------------------------------------------------
if has('vim_starting')
    " 初回起動時のみruntimepathにNeoBundleのパスを指定する
    set runtimepath+=~/.vim/bundle/neobundle.vim/

    " NeoBundleが未インストールであればgit cloneする
    if !isdirectory(expand("~/.vim/bundle/neobundle.vim/"))
        echo "install NeoBundle..."
        :call system("git clone git://github.com/Shougo/neobundle.vim ~/.vim/bundle/neobundle.vim")
    endif
endif

call neobundle#begin(expand('~/.vim/bundle/'))

" NeoBundle自身を管理
NeoBundleFetch 'Shougo/neobundle.vim'

NeoBundle 'altercation/vim-colors-solarized' "カラースキーマ
NeoBundle 'vim-airline/vim-airline' " ステータスライン
NeoBundle 'vim-airline/vim-airline-themes'
NeoBundle 'bronson/vim-trailing-whitespace' " 末尾の全角と半角の空白文字を赤くハイライト
NeoBundle 'Yggdroot/indentLine' " インデントの可視化
NeoBundle 'scrooloose/nerdtree' "ファイルエクプローラー
NeoBundle 'raymond-w-ko/vim-niji' "scheme用の()の対応の可視化
NeoBundle 'editorconfig/editorconfig-vim' "http://editorconfig.org/

NeoBundle 'lunaru/vim-twig' " テンプレートエンジンtwigのシンタックスハイライト
NeoBundle 'soramugi/auto-ctags.vim' "ctags
NeoBundle 'thinca/vim-quickrun'
NeoBundle 'JavaScript-syntax' " JavaScriptのシンタクスハイライト
NeoBundle 'pangloss/vim-javascript' " JavaScriptのインデント
NeoBundle "ctrlpvim/ctrlp.vim" " @see https://kien.github.io/ctrlp.vim/
NeoBundle 'airblade/vim-gitgutter' " vimでgitとの差分を表示

function! s:meet_neocomplete_requirements()
    return has('lua') && (v:version > 703 || (v:version == 703 && has('patch885')))
endfunction

"neocompleacacheは開発終了しており、neocomplete.vimに開発移行しているが
"luaが必要だったり, 7.3.855以前のvimでは動作しないため両方入れる
if s:meet_neocomplete_requirements()
    NeoBundle      'Shougo/neocomplete.vim'
    NeoBundleFetch 'Shougo/neocomplcache.vim'
else
    NeoBundleFetch 'Shougo/neocomplete.vim'
    NeoBundle      'Shougo/neocomplcache.vim'
endif

NeoBundle "Shougo/neosnippet" " スニペットの補完機能
NeoBundle 'Shougo/neosnippet-snippets' " スニペット集
"NeoBundle 'Blackrush/vim-gocode'
NeoBundle 'fatih/vim-go'

call neobundle#end()


filetype plugin indent on " ファイルタイプ別のVimプラグイン/インデントを有効にする

NeoBundleCheck " 未インストールのVimプラグインがある場合、インストールするかどうかを尋ねてくれるようにする設定

"----------------------------------------------------------
" 基本設定
"----------------------------------------------------------
let mapleader = "," "キーマップリーダー
set nobackup "バックアップをつくらない
set backspace=indent,eol,start " バックスペースでなんでも消せるように
set autoread                     " 他で書き換えられたら自動で読み直す
set noswapfile                   "スワップファイルをつくらない
set visualbell t_vb=             " ビープをならさない

noremap ,e :tabnew $MYVIMRC <CR>
noremap ,s :source $MYVIMRC <CR>
nnoremap ; :

"----------------------------------------------------------
" カラースキーム
"----------------------------------------------------------
set term=screen-256color
syntax enable "構文に色つける
colorscheme solarized " カラースキームにsolarized
set background=dark

"----------------------------------------------------------
" 文字
"----------------------------------------------------------
set fileencoding=utf-8 "保存時の文字コード
set fileencodings=ucs-boms,utf-8,euc-jp,cp932 "読み込み時の文字コードの自動判別. 左側が優先される
set fileformats=unix,dos,mac "改行コードの自動判別. 左側が優先される
set ambiwidth=double "□や○文字が崩れる問題を解

"----------------------------------------------------------
" ステータスラインの設定
"----------------------------------------------------------
set laststatus=2 " ステータスラインを常に表示
set showmode " 現在のモードを表示
set showcmd " 打ったコマンドをステータスラインの下に表示
set ruler " ステータスラインの右側にカーソルの現在位置を表示す;
let g:airline_theme = 'solarized'

"----------------------------------------------------------
" タブ・インデント
"----------------------------------------------------------
set expandtab " タブ入力を複数の空白入力に置き換える
set tabstop=4 " 画面上でタブ文字が占める幅
set softtabstop=4 " 連続した空白に対してタブキーやバックスペースキーでカーソルが動く幅
set autoindent " 改行時に前の行のインデントを継続する
set smartindent " 改行時に前の行の構文をチェックし次の行のインデントを増減する
set shiftwidth=4 " smartindentで増減する幅

"----------------------------------------------------------
" 文字列検索
"----------------------------------------------------------
set incsearch " インクリメンタルサーチ. １文字入力毎に検索を行う
set ignorecase " 検索パターンに大文字小文字を区別しない
set smartcase " 検索パターンに大文字を含んでいたら大文字小文字を区別する
set hlsearch " 検索結果をハイライト

"----------------------------------------------------------
" カーソル
"----------------------------------------------------------
set whichwrap=b,s,h,l,<,>,[,],~ " カーソルの左右移動で行末から次の行の行頭への移動が可能になる
set number " 行番号を表示
set cursorline " カーソルラインをハイライト

" 行が折り返し表示されていた場合、行単位ではなく表示行単位でカーソルを移動する
nnoremap j gj
nnoremap k gk
nnoremap <down> gj
nnoremap <up> gk

" バックスペースキーの有効化
set backspace=indent,eol,start

" 前回終了したカーソル行に移動
if has("autocmd")
    autocmd BufReadPost *
        \ if line("'\"") > 0 && line ("'\"") <= line("$") |
        \   exe "normal! g'\"" |
        \ endif
endif

"----------------------------------------------------------
" カッコ・タグの対応
"----------------------------------------------------------
set showmatch " 括弧の対応関係を一瞬表示する
source $VIMRUNTIME/macros/matchit.vim " Vimの「%」を拡張する

set wildmenu " コマンドモードの補完
set history=5000 " 保存するコマンド履歴の数

"----------------------------------------------------------
" マウスでカーソル移動とスクロール
"----------------------------------------------------------
if has('mouse')
    set mouse=a
    if has('mouse_sgr')
        set ttymouse=sgr
    elseif v:version > 703 || v:version is 703 && has('patch632')
        set ttymouse=sgr
    else
        set ttymouse=xterm2
    endif
endif

"----------------------------------------------------------
" クリップボードからのペースト
"----------------------------------------------------------
" 挿入モードでクリップボードからペーストする時に自動でインデントさせないようにする
if &term =~ "xterm"
    let &t_SI .= "\e[?2004h"
    let &t_EI .= "\e[?2004l"
    let &pastetoggle = "\e[201~"

    function! XTermPasteBegin(ret)
        set paste
        return a:ret
    endfunction

    inoremap <special> <expr> <Esc>[200~ XTermPasteBegin("")
endif

"----------------------------------------------------------
" neocomplete・neosnippetの設定
"----------------------------------------------------------
if s:meet_neocomplete_requirements()
    "neocompleteの設定
    " Vim起動時にneocompleteを有効にする
    let g:neocomplete#enable_at_startup = 1
    " smartcase有効化. 大文字が入力されるまで大文字小文字の区別を無視する
    let g:neocomplete#enable_smart_case = 1
    " 3文字以上の単語に対して補完を有効にする
    let g:neocomplete#min_keyword_length = 3
    " 区切り文字まで補完する
    let g:neocomplete#enable_auto_delimiter = 1
    " 1文字目の入力から補完のポップアップを表示
    let g:neocomplete#auto_completion_start_length = 1
    " バックスペースで補完のポップアップを閉じる
    inoremap <expr><BS> neocomplete#smart_close_popup()."<C-h>"

else
    "neocomplecacheの設定
endif

" エンターキーで補完候補の確定. スニペットの展開もエンターキーで確定
imap <expr><CR> neosnippet#expandable() ? "<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "<C-y>" : "<CR>"
" タブキーで補完候補の選択. スニペット内のジャンプもタブキーでジャンプ
imap <expr><TAB> pumvisible() ? "<C-n>" : neosnippet#jumpable() ? "<Plug>(neosnippet_expand_or_jump)" : "<TAB>"


"----------------------------------------------------------
" nerdtree
"----------------------------------------------------------
autocmd vimenter * if !argc() | NERDTree | endif
""switch NERDTree mode with <C-e>
map <silent> <C-e> :NERDTreeToggle<CR>


"----------------------------------------------------------
" quickrun
"----------------------------------------------------------
"初期化
let g:quickrun_config = {}
set splitright

"vimproc
au FileType qf nnoremap <silent><buffer>q :quit<CR>
let g:quickrun_config['_'] = {}
let g:quickrun_config['_']['runner'] = 'vimproc'
let g:quickrun_config['_']['runner/vimproc/updatetime'] = 100

"gosh
let g:quickrun_config['scm'] = {}
let g:quickrun_config['scm']['command'] = 'gosh'
let g:quickrun_config['scm']['exec'] = '%c %o %s'


"----------------------------------------------------------
" ctags
"----------------------------------------------------------
let g:auto_ctags = 1 "ファイル保存時にctagsを自動生成する。明示的に宣言
let g:auto_ctags_directory_list = ['.git', '.svn']
let g:auto_ctags_tags_args = '--tag-relative --recurse --sort=yes'
nnoremap <C-h> :vsp<CR> :exe("tjump ".expand('<cword>'))<CR>
nnoremap <C-k> :split<CR> :exe("tjump ".expand('<cword>'))<CR>

"----------------------------------------------------------
" ctrlp
"----------------------------------------------------------
let g:ctrlp_clear_cache_on_exit = 0   " 終了時キャッシュをクリアしない
let g:ctrlp_mruf_max            = 500 " MRUの最大記録数
set wildignore+=*/tmp/*,*.so,*.swp,*.zip " Linux/MacOSX
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'





"----------------------------------------------------------
" local dependency
"----------------------------------------------------------
if filereadable(expand('~/.vimrc.local'))
    source ~/.vimrc.local
endif


